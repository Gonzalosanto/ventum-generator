import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { getData, setSelectedCat, setIsExpanded } from "./DashboardSlice.js";

import GenericCat from '../../components/GenericCat/GenericCat.jsx';
import { cleanError, cleanMessage} from '../../components/GenericCat/GenericCatSlice.js';
import { Avatar, Badge, Button, IconButton, Stack, Typography, } from '@mui/material';
import { Add, AdminPanelSettings, AttachFile, Check, Close, CreditCard, Comment, Delete, Event, History, 
Notifications as NotificationIcon, LocalActivity, Person, Receipt, Refresh, Timeline, Edit, Note, MoreHoriz, Visibility, Logout } from '@mui/icons-material';
import './Dashboard.css';



import Rols from './Categories/Rols/Rols.jsx';
//import DashboardCat from './DashboardCat/DashboardCat.jsx';
import { SnackbarProvider, useSnackbar } from 'notistack';
import { signOut } from "../../redux/reducers/authSlice.js";

const Dashboard = (props) => {

    const dispatch = useDispatch();
    useEffect(() => { dispatch(getData()) }, []);
    const selectedCat = useSelector(state => state.dashboard.selectedCat);


    //const { logout, user, isAuthenticated, isLoading, loginWithRedirect } = useAuth0();

    const NotificationsSnackbars = () => {
            
            const { enqueueSnackbar } = useSnackbar();
            const message = useSelector(state => state.genericCat.message);
            const error = useSelector(state => state.genericCat.error);

            useEffect(() => {
                if (message){
                    enqueueSnackbar(message, { variant: 'success', autoHideDuration: 3000});
                    dispatch(cleanMessage());
                }
                if (error) {
                    enqueueSnackbar(error, { variant: 'error', autoHideDuration: 3000 });
                    dispatch(cleanError());
                }
            }, [message, error]);

        return <></>
        }

    const Sidebar = () => {

        //const isExpanded = useSelector(state => state.dashboard.isExpanded);
        const isExpanded = true;
        const schema = useSelector(state => state.dashboard.data?.schema);
        

        const Logo = () => {
            return (<div className="logo-container" style={{ padding: '1.5rem', paddingLeft: '.5rem' }}>
                <img src="{{logoSrc}}" alt="DescripciÃ³n" className="logo-image" />
            </div>)
        };

        const SidebarOptions = () => {
            const isRelationTable = (cat) => schema[cat].filter(x => x.pk).length > 1;

            return (<div className="sidebar-category-options">
                {{sidebarComponents}}
            </div>)
        };

        const Profile = () => {
            return (<div className="sidebar-category-button">
                <IconButton children={<Person className="sidebar-category-button-icon" />} />
                <Button className="sidebar-category-button-text" children={'PERFIL'} />
            </div>)
        };

        const Notifications = () => {
            return (<div className="sidebar-category-button">
                <IconButton children={
                    <Badge badgeContent={4} color="primary">
                        <NotificationIcon className="sidebar-category-button-icon" />
                    </Badge>
                } />
                <Button className="sidebar-category-button-text" children={'NOTIFICACIONES'} />
            </div>)
        };

        const LogOut = () => {
            return (<div className="sidebar-category-logout">
                <IconButton children={<Logout className="sidebar-category-button-icon" />} />
                <Button className="sidebar-category-button-text" onClick={e => dispatch(signOut())} children={'LOG OUT'} />
            </div>);
        };

        return (<div className={`sidebar ${isExpanded ? 'expanded' : ''}`} onClick={e => dispatch(setIsExpanded(true))}>
            <Logo />
            <div className="sidebar-category-options" style={{ borderBottom: '2px solid #ccc' }}>
                <Profile />
                <Notifications />
            </div>
            <SidebarOptions />
            <LogOut />
        </div >);
    };

    const Main = () => {
        //const isExpanded = useSelector(state => state.dashboard.isExpanded);
        const isExpanded = true;
        const schema = useSelector(state => state.dashboard.data?.schema);
        


        return <div className={`main-content ${isExpanded ? 'expanded' : ''}`}>
            {/* <Rols /> */}
            {(schema && selectedCat) ? <GenericCat selectedCat={selectedCat} auth={{}} /> : null};
        </div>
    };

    return (
        <SnackbarProvider maxSnack={5}>
            <NotificationsSnackbars />
            <div className="container">
                <Sidebar />
                <Main />
            </div>
        </SnackbarProvider>)
}

// export default withAuthenticationRequired(Dashboard, { onRedirecting: () => <h1>Redirecting</h1> });
export default Dashboard;